import aiogram
import logging
import sqlite3
import random, time, asyncio
from aiogram import Bot, Dispatcher, executor, types
from time import gmtime, strptime, strftime
import config as cfg
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.token, parse_mode='html')

storage = MemoryStorage()

dp = Dispatcher(bot=bot, storage=storage)

dp.middleware.setup(LoggingMiddleware())

print("""\033[1;32m
|-----------------------|
|Developer: geyklub.      |
|-----------------------|\033[0m""")


connect = sqlite3.connect("db.db")
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users(
    user_id INT,
    user_name STRING,
    balance INT,
    ethereum INT,
    scam INT,
    blago INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS chance(
    chance INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promoco(
user_id INT, 
promoco_name TEXT, 
reward BIGINT, 
max_users INT, 
users INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promiki(
user_id INT, 
promo_name TEXT, 
reward BIGINT, 
max_users INT, 
users INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promiki(
user_id INT, 
promo_name TEXT, 
reward BIGINT, 
max_users INT, 
users INT
)
""")
cursor.execute("""CREATE TABLE IF NOT EXISTS promo(
user_id INT, 
activation INT, 
promo_name TEXT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo1(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo2(
    user_id INT,
    members INT,
    ob_members INT
)
""")
cursor.execute("""CREATE TABLE IF NOT EXISTS promo3(
    user_id INT,
    members INT,
    ob_members INT
)
""")
cursor.execute("""CREATE TABLE IF NOT EXISTS promo4(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo5(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo6(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo7(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo8(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo9(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo10(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo11(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo12(
    user_id INT,
    members INT,
    ob_members INT
)
""")

cursor.execute("""CREATE TABLE IF NOT EXISTS promo13(
    user_id INT,
    members INT,
    ob_members INT
)
""")

async def anti_flood(*args, **kwargs):
	return

class reg(StatesGroup):
	st = State()
	ref = State()

@dp.message_handler(commands=['reset'])
async def start_cmd(message):
    msg = message
    user_id = msg.from_user.id
    user_name = cursor.execute(
        "SELECT user_name from users where user_id = ?", (message.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    if user_id == cfg.admin:
        await bot.send_message(message.chat.id, f"ü§¥ |–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: <a href='tg://user?id={user_id}'>{user_name}</a>\nüåè |–î–µ–π—Å—Ç–≤–∏–µ: –ú–∞—Å–æ–≤–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ\nüíà | –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ –æ–±–Ω—É–ª–µ–Ω–∏—é: —É—Å–ø–µ—à–Ω–æ‚úÖÔ∏è\nüë® | –í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º", parse_mode='html')
        cursor.execute(f'UPDATE users SET balance = {0}')
        cursor.execute(f'UPDATE users SET blago = {0}')
        cursor.execute(f'UPDATE users SET level = {0}')
        cursor.execute(f'UPDATE users SET work = {0}')
        cursor.execute(f'UPDATE users SET user_name = "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω GBX"')
        cursor.execute(f'UPDATE users SET bank = {500}')                
        cursor.execute(f'UPDATE users SET rating = {0}')                
        cursor.execute('DELETE from businesses')      
        cursor.execute(f'UPDATE farm SET linen = {0}')
        cursor.execute(f'UPDATE farm SET cotton = {0}')
        cursor.execute(f'UPDATE house SET house = {0}')        
        cursor.execute(f'UPDATE house SET basement = {0}')
        cursor.execute(f'UPDATE cars SET cars = {0}')   
        cursor.execute(f'UPDATE airplanes SET airplanes = {0}')        
        cursor.execute(f'UPDATE bot_time SET stavka_games = {0} ')
        cursor.execute(f'UPDATE bot_time SET stavka_bank = {0} ')
        cursor.execute(f'UPDATE bot_time SET stavka_bonus = {0} ')
        cursor.execute(f'UPDATE bot_time SET stavka_depozit = {0} ')
        cursor.execute(f'UPDATE bot_time SET time_pick = {0} ')
        cursor.execute(f'UPDATE bot_time SET time_rake = {0} ')
        cursor.execute(f'UPDATE bot_time SET time_craft = {0} ')
        cursor.execute(f'UPDATE bot_time SET time_kit = {0} ')

        connect.commit()
        full_name = msg.from_user.full_name
        print(f'{full_name} —Å–¥–µ–ª–∞–ª –º–∞—Å–æ–≤–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ')
        return
    else:
        await bot.send_message(message.chat.id, f"üÜò | <a href='tg://user?id={user_id}'>{user_name}</a> , –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \"Owner\"", parse_mode='html')
            								    								
@dp.message_handler(commands=['users_bal'])
@dp.throttled(anti_flood, rate=0.5)
async def sbal(message):
	user_id = message.from_user.id
	chat_id = message.chat.id
	try:
		id = int(message.text.split()[1])
		su = message.text.split()[2]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä ¬ª <code>/users_bal</code> (telegram id) (—Å—É–º–º–∞)')
	name = cursor.execute(f'SELECT user_name from users where user_id = {id}').fetchone()
	name = str(name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {id}').fetchone()
	balance = int(balance[0])
	if user_id == cfg.owner.gay.adminestrator:
		await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å <b>{name}</b> –Ω–∞ <b>{summ}$</b>')
		cursor.execute(f'UPDATE users SET balance = {sum} WHERE user_id = {id}')
		connect.commit()
	else:
		return

@dp.message_handler(commands=['users'])
@dp.throttled(anti_flood, rate=0.5)
async def sbal(message):
	user_id = message.from_user.id
	chat_id = message.chat.id
	try:
		id = int(message.text.split()[1])
		su = message.text.split()[2]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä ¬ª <code>/users_bal</code> (telegram id) (—Å—É–º–º–∞)')
	name = cursor.execute(f'SELECT user_name from users where user_id = {id}').fetchone()
	name = str(name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {id}').fetchone()
	balance = int(balance[0])
	if user_id == cfg.admin:
		await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å <b>{name}</b> –Ω–∞ <b>{summ}$</b>')
		cursor.execute(f'UPDATE users SET balance = {sum} WHERE user_id = {id}')
		connect.commit()
	else:
		return
		
@dp.message_handler(text=['–ø–æ–º–æ—â—å', '–ü–æ–º–æ—â—å'])
@dp.throttled(anti_flood, rate=1)
async def help(message):
	await message.answer(f'''–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª—Å —Å –±–æ—Ç–æ–º:
üí∏/pay (telegram id) —Å—É–º–º–∞ - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω–µ–≥
üíµ/top - —Ç–æ–ø 5 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
üòÑ/me - –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
üí∏/—Å–∫–∞–º
üî¥/rul
üé∞/coin''')

@dp.message_handler(text=['—è', '–Ø', '/me'])
@dp.throttled(anti_flood, rate=0.5)
async def balance(message):
	user_id = message.from_user.id
	photo = open('start.jpg', 'rb')
	user_name = cursor.execute(f'SELECT user_name from users where user_id = {user_id}').fetchone()
	user_name = str(user_name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {user_id}').fetchone()
	balance = int(balance[0])
	b = '{:,}'.format(balance).replace(",", ".")
	await bot.send_photo(chat_id = message.chat.id, photo=photo, caption=f'–ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>, —Å–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ <b>–õ–∞—Å –í–µ–≥–∞—Å</b> –Ω–∞ —Ä—É–∫–∞—Ö —É —Ç–µ–±—è <b>{b}$</b>')

@dp.message_handler(commands=['start'])
@dp.throttled(anti_flood, rate=0.5)
async def start(message):
	msg = message
	user_id = message.from_user.id
	user_name = message.from_user.full_name
	photo = open('start.jpg', 'rb')
	referrer_id = None
	cursor.execute(f'SELECT user_id from users where user_id = {user_id}')
	if cursor.fetchone() is None:
		start_command = message.text
		referrer_id = str(start_command[7:])
		if str(referrer_id) != '' and referrer_id.isdigit():
			if str(referrer_id) != str(msg.from_user.id):
				global referrer_id2
				referrer_id2=referrer_id
				await bot.send_photo(chat_id = message.chat.id, photo=photo, caption='‚úÖ <b>–ü—Ä–∏–¥—É–º–∞–π –∏–º—è —Å–≤–æ–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É</b>')
				await reg.ref.set()
			else:
				await message.answer('–ì–µ–Ω–∏–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ—Ç.')
		else:
			await bot.send_photo(chat_id = message.chat.id, photo=photo, caption='‚úÖ <b>–ü—Ä–∏–¥—É–º–∞–π –∏–º—è —Å–≤–æ–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É</b>')
			await reg.st.set()
	else:
		if message.chat.id == user_id:
			kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
			b1 = InlineKeyboardButton('–Ø')
			b2 = InlineKeyboardButton('–ü–æ–º–æ—â—å')
			b2 = InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å')
			kb.row(b1, b2,b3)
			await message.answer(f'üéõ <b>–ú–µ–Ω—é –±–æ—Ç–∞</b>', reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.ANY, state=reg.st)
async def regs(message, state: FSMContext):
	user_id = message.from_user.id
	name = message.from_user.full_name
	user_name = message.text
	if message.chat.id == user_id:
		kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
		b1 = InlineKeyboardButton('–Ø')
		b2 = InlineKeyboardButton('–ü–æ–º–æ—â—å')
		kb.row(b1, b2)
	await message.answer(f'''‚úà <b>{user_name}, —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

<b>–±–æ—Ç –º–∏–ª–ª–∏–æ–Ω–µ—Ä - —ç—Ç–æ –±–æ—Ç –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å:</b>
<i>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏: –ø–æ–∫—É–ø–∞—Ç—å –º–∞—à–∏–Ω—ã, –æ–¥–µ–∂–¥—É; —Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å; –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ–ø–≥ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...</i>''', reply_markup=kb)
	cursor.execute("INSERT INTO users VALUES(?, ?, ?, ?, ?);", (user_id, user_name, 200, 0, 0))
	connect.commit()
	await state.finish()

@dp.message_handler(content_types=types.ContentType.ANY, state=reg.ref)
async def regs(message, state: FSMContext):
	user_id = message.from_user.id
	name = message.from_user.full_name
	user_name = message.text
	if message.chat.id == user_id:
		kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
		b1 = InlineKeyboardButton('–Ø')
		b2 = InlineKeyboardButton('–ü–æ–º–æ—â—å')
		kb.row(b1, b2)
	await message.answer(f'''‚úà <b>{user_name}, —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

<b>–±–æ—Ç –º–∏–ª–ª–∏–æ–Ω–µ—Ä - —ç—Ç–æ –±–æ—Ç –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å:</b>
<i>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏: –ø–æ–∫—É–ø–∞—Ç—å –º–∞—à–∏–Ω—ã, –æ–¥–µ–∂–¥—É; —Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å; –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ–ø–≥ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...</i>''', reply_markup=kb)
	cursor.execute("INSERT INTO users VALUES(?, ?, ?, ?, ?);", (user_id, user_name, 200, 0, 0))
	connect.commit()
	await state.finish()
	balance = cursor.execute(f'SELECT balance from users where user_id = {referrer_id2}').fetchone()
	balance = int(balance[0])
	scam = cursor.execute(f'SELECT scam from users where user_id = {referrer_id2}').fetchone()
	scam = int(scam[0])
	cursor.execute(f'UPDATE users SET balance = {balance+400000000} WHERE user_id = {referrer_id2}')
	cursor.execute(f'UPDATE users SET scam = {scam+400000000} WHERE user_id = {referrer_id2}')
	await bot.send_message(referrer_id2, f'''ü¶£ <b>–ï—Å—Ç—å –ø—Ä–æ—Ñ–∏—Ç!</b>
	<i>- –í–∞–º —É–¥–∞–ª–æ—Å—å –∑–∞—Å–∫–∞–º–∏—Ç—å {name}. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ¬ª 400.000 000$</i>''')
	connect.commit()

	
	c = int(message.text.split()[1])
	
	if user_id == cfg.admin:
		if c in range(0, 5):
			await message.answer(f'–®–∞–Ω—Å –≤ /coin /—Ä—É–ª–µ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {c}/4')
			cursor.execute(f'UPDATE chance SET chance = {c}')
			connect.commit()
		else:
			await message.answer('–®–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-4')
	
@dp.message_handler(commands=['coin'])
@dp.throttled(anti_flood, rate=0.5)
async def blago(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(message.text.split()) < 2:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä ¬ª /coin —Å—É–º–º–∞')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
    try:
        su = message.text.split()[1]
        su2 = su.replace('–∫', '000').replace('–º', '000000').replace('.', '')
        sum_amount = int(su2)
        formatted_sum = '{:,}'.format(sum_amount).replace(",", ".")
    except ValueError:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.')
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞
    user_name = cursor.execute('SELECT user_name FROM users WHERE user_id = ?', (user_id,)).fetchone()
    balance = cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()
    chance = cursor.execute('SELECT chance FROM chance').fetchone()

    if user_name is None or balance is None or chance is None:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        return

    user_name = str(user_name[0])
    balance = int(balance[0])
    chance = int(chance[0])

    win_chance = 100 if chance == 0 else chance * 25 if 0 < chance < 4 else 0

    r = random.randint(1, 100)
    rand = random.randint(1, 50)

    c = 2 if rand >= 20 else 3

    if sum_amount <= balance:
        if sum_amount >= 1:
            if win_chance < r <= 100:
                wn = sum_amount * c
                w = '{:,}'.format(wn).replace(",", ".")
                n = '{:,}'.format(balance + wn).replace(",", ".")
                await message.answer(f'ü•≥ <b>{user_name}</b>, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{w}$</b> (x{c})\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {n}')
                cursor.execute('UPDATE users SET balance = ? WHERE user_id = ?', (balance + wn, user_id))
            else:
                g = '{:,}'.format(balance - sum_amount).replace(",", ".")
                await message.answer(f'üò¢ <b>{user_name}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ <b>{formatted_sum}</b>\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: {g}$ (x0)')
                cursor.execute('UPDATE users SET balance = ? WHERE user_id = ?', (balance - sum_amount, user_id))
            connect.commit()
        else:
            await message.answer('–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')







	
@dp.message_handler(commands=['blago'])
@dp.throttled(anti_flood, rate=0.5)
async def blago(message):
	user_id = message.from_user.id
	try:
		su = message.text.split()[1]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'''–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!
–ü—Ä–∏–º–µ—Ä ¬ª /blago —Å—É–º–º–∞''')
	user_name = cursor.execute(f'SELECT user_name from users where user_id = {user_id}').fetchone()
	user_name = str(user_name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {user_id}').fetchone()
	balance = int(balance[0])
	blago = cursor.execute(f'SELECT blago from users where user_id = {user_id}').fetchone()
	blago = int(blago[0])
	
	if balance >= sum:
		if sum >= 1:
			await message.answer(f'–í—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ {summ}$')
			cursor.execute(f'UPDATE users SET balance = {balance-sum} WHERE user_id = {user_id}')
			cursor.execute(f'UPDATE users SET blago = {blago+sum} WHERE user_id = {user_id}')
			connect.commit()
		else:
			await message.answer(f'–ù–µ–ª—å–∑—è –ø–æ–∂–µ—Ä—Ç–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
	else:
		await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

@dp.callback_query_handler(text_contains='top_')
@dp.throttled(anti_flood, rate=0.5)
async def top(callback):
	user_id = callback.from_user.id
	chat_id = callback.message.chat.id
	message_id = callback.message.message_id
	cd = callback.data[4:]
	if cd == 'blago':
		list = cursor.execute(f"SELECT * FROM users ORDER BY blago DESC")
		list = cursor.fetchmany(1000)
		top_list = []
		my_list = []
		top_list2 = []
		num = 1
		b = InlineKeyboardButton(text='–¢–æ–ø –±–æ–≥–∞—Ç—ã—Ö', callback_data='top_many')
		kb = InlineKeyboardMarkup()
		kb.row(b)
		for user in list:
			bal = user[4]
			balance = '{:,}'.format(bal).replace(',', '.')
			if user[0]==user_id:
				for x in str(num):
					my_list.append(int(x))
					if len(my_list)==1:
						first = my_list[0]
						count=first
					elif len(my_list)==2:
						first = my_list[0]
						second = my_list[1]
						count = first + second
					elif len(my_list)==3:
						first = my_list[0]
						second = my_list[1]
						third=my_list[2]
						count=first+second+third
					else:
						count="0"
				top_list2.append(f'''<b>(–¢—ã –Ω–∞ {count} –º–µ—Å—Ç–µ)</b>\n\n''')
			if num <= 5:
				top_list.append(f'''<b>{num}. <a href='tg://openmessage?user_id={user[0]}'>{user[1]}</a> - {balance}$</b>''')
				num += 1
		top2 = "\n".join(top_list2)
		top = "\n".join(top_list)
		text = f'''üí∞ <b>–¢–æ–ø 5 –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–π</b>\n'''+ top2 + top
		await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=text, reply_markup=kb)
	else:
		list = cursor.execute(f"SELECT * FROM users ORDER BY balance DESC")
		list = cursor.fetchmany(1000)
		top_list = []
		top_list2 = []
		my_list = []
		num = 1
		b = InlineKeyboardButton(text='–¢–æ–ø –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–π', callback_data='top_blago')
		kb = InlineKeyboardMarkup()
		kb.row(b)
		for user in list:
			bal = user[2]
			balance = '{:,}'.format(bal).replace(',', '.')
			if user[0]==user_id:
				for x in str(num):
					my_list.append(int(x))
					if len(my_list)==1:
						first = my_list[0]
						count=first
					elif len(my_list)==2:
						first = my_list[0]
						second = my_list[1]
						count = first + second
					elif len(my_list)==3:
						first = my_list[0]
						second = my_list[1]
						third=my_list[2]
						count=first+second+third
					else:
						count="0"
				top_list2.append(f'''<b>(–¢—ã –Ω–∞ {count} –º–µ—Å—Ç–µ)</b>\n\n''')
			if num <= 5:
				top_list.append(f'''<b>{num}. <a href='tg://openmessage?user_id={user[0]}'>{user[1]}</a> - {balance}$</b>''')
				num += 1
		top = "\n".join(top_list)
		top2 = "\n".join(top_list2)
		text = f'''üí∞ <b>–¢–æ–ø 5 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</b>\n'''+ top2 + top
		await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=text, reply_markup=kb)

@dp.message_handler(commands=["CheckId"], commands_prefix='!./')
async def id(message):
	user_id = message.reply_to_message.from_user.id
	if message.reply_to_message:
		await message.reply(f"–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}", parse_mode='html')	
	if not message.reply_to_message:
		await message.reply(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!", parse_mode='html')
		
@dp.message_handler(text=['—Ç–æ–ø', '–¢–æ–ø', '/top'])
@dp.throttled(anti_flood, rate=0.5)
async def top(message):
	user_id = message.from_user.id
	list = cursor.execute(f"SELECT * FROM users ORDER BY balance DESC")
	list = cursor.fetchmany(5)
	top_list = []
	my_list = []
	top_list2 = []
	num = 1
	photo = open('top.jpg', 'rb')
	b = InlineKeyboardButton(text='–¢–æ–ø –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª–µ–π', callback_data='top_blago')
	kb = InlineKeyboardMarkup()
	kb.row(b)
	for user in list:
		bal = user[2]
		balance = '{:,}'.format(bal).replace(',', '.')
		if user[0]==user_id:
			for x in str(num):
				my_list.append(int(x))
				if len(my_list)==1:
					first = my_list[0]
					count=first
				elif len(my_list)==2:
					first = my_list[0]
					second = my_list[1]
					count = first + second
				elif len(my_list)==3:
					first = my_list[0]
					second = my_list[1]
					third=my_list[2]
					count=first+second+third
				else:
					count="0"
			top_list2.append(f'''<b>(–¢—ã –Ω–∞ {count} –º–µ—Å—Ç–µ)</b>\n\n''')
		if num <= 5:
			top_list.append(f'''<b>{num}. <a href='tg://openmessage?user_id={user[0]}'>{user[1]}</a> - {balance}$</b>''')
			num += 1
	top = "\n".join(top_list)
	top2 = "\n".join(top_list2)
	text = f'''üí∞ <b>–¢–æ–ø 5 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n</b>'''+ top2 + top
	await bot.send_photo(chat_id = message.chat.id, photo=photo, caption=text, reply_markup=kb)

@dp.message_handler(text=['—Å–∫–∞–º', '–°–∫–∞–º', '/scam'])
@dp.throttled(anti_flood, rate=0.5)
async def scam(message):
	user_id = message.from_user.id
	name = cursor.execute(f'SELECT user_name from users where user_id = {user_id}').fetchone()
	name = str(name[0])
	scam = cursor.execute(f'SELECT scam from users where user_id = {user_id}').fetchone()
	scam = int(scam[0])
	
	if scam == 0:
		s = '---'
	else:
		sc = '{:,}'.format(scam).replace(",", ".")
		s = f'{sc}$'
	
	photo = open('scam.jpg', 'rb')
	
	await bot.send_photo(chat_id = message.chat.id, photo=photo, caption=f'''<b>{name}, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ "—Å–∫–∞–º"

ü¶£ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>
<i>{s}</i>

üíµ <b>–û–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–º–æ–Ω—Ç–∞:</b>
<i>400.000.000$</i>

üîó <b>–¢–≤–æ—è —Å–∫–∞–º-—Å—Å—ã–ª–∫–∞:</b>
<code>https://t.me/{cfg.bot_name}?start={user_id}</code>''')

@dp.message_handler(commands=['users_bal'])
@dp.throttled(anti_flood, rate=0.5)
async def sbal(message):
	user_id = message.from_user.id
	chat_id = message.chat.id
	try:
		id = int(message.text.split()[1])
		su = message.text.split()[2]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä ¬ª <code>/users_bal</code> (telegram id) (—Å—É–º–º–∞)')
	name = cursor.execute(f'SELECT user_name from users where user_id = {id}').fetchone()
	name = str(name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {id}').fetchone()
	balance = int(balance[0])
	if user_id == cfg.admin:
		await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å <b>{name}</b> –Ω–∞ <b>{summ}$</b>')
		cursor.execute(f'UPDATE users SET balance = {sum} WHERE user_id = {id}')
		connect.commit()
	else:
		return



@dp.message_handler(commands=['—Ä—É–ª'])
async def chance(message: types.Message):
    user_id = message.from_user.id
    try:
        col = message.text.split()[1]
        su = message.text.split()[2]
        su2 = su.replace('–∫', '000')
        su3 = su2.replace('–º', '000000')
        su4 = su3.replace('.', '')
        sum_bet = int(su4)
        summ = '{:,}'.format(sum_bet).replace(",", ".")
        color = str(col).replace("–∫—Ä–∞", "–∫—Ä–∞—Å–Ω—ã–π").replace('—á–µ—Ä', '—á–µ—Ä–Ω—ã–π')
    except (IndexError, ValueError):
        await message.answer(f'''–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!
–ü—Ä–∏–º–µ—Ä ¬ª /—Ä—É–ª –∫—Ä–∞/—á–µ—Ä —Å—É–º–º–∞''')
        return

    user_name = cursor.execute(f'SELECT user_name FROM users WHERE user_id = ?', (user_id,)).fetchone()
    if user_name is None:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    user_name = str(user_name[0])
    balance = cursor.execute(f'SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()
    
    if balance is None:
        await message.answer('–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    balance = int(balance[0])

    if col not in ['–∫—Ä–∞', '—á–µ—Ä']:
        await message.answer(f'''–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!
–ü—Ä–∏–º–µ—Ä ¬ª /—Ä—É–ª –∫—Ä–∞/—á–µ—Ä —Å—É–º–º–∞''')
        return

    l = ['–∫—Ä–∞—Å–Ω—ã–π', '—á–µ—Ä–Ω—ã–π']
    r = random.choice(l)
    ran = random.randint(1, 5)

    c = 2 if ran <= 15 else 3

    photo_path = 'red.jpg' if r == '–∫—Ä–∞—Å–Ω—ã–π' else 'black.jpg'

    if balance >= sum_bet:
        if sum_bet >= 1:
            if color == r:
                nb = sum_bet * c
                n = '{:,}'.format(nb).replace(",", ".")
                new_balance = balance + nb
                b = '{:,}'.format(new_balance).replace(",", ".")
                await bot.send_photo(chat_id=message.chat.id, photo=open(photo_path, 'rb'), 
                                     caption=f'''üéâ <b>{user_name}</b>, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª <b>{n}$</b><i>(x{c})</i>

–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {b}''')
                cursor.execute(f'UPDATE users SET balance = ? WHERE user_id = ?', (new_balance, user_id))
                connect.commit()
            else:
                new_balance = balance - sum_bet
                u = '{:,}'.format(new_balance).replace(",", ".") 
                await bot.send_photo(chat_id=message.chat.id, photo=open(photo_path, 'rb'), 
                                     caption=f'''üò¢ <b>{user_name}</b>, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª <b>{summ}$</b> (x0)

–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {u}''')
                cursor.execute(f'UPDATE users SET balance = ? WHERE user_id = ?', (new_balance, user_id))
                connect.commit()
        else:
            await message.answer(f'–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')




@dp.message_handler(text=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∞', '—Å—Ç–∞—Ç', '–°—Ç–∞—Ç–∞', '–°—Ç–∞—Ç'])
async def stats(message):
    user_name = cursor.execute(
        "SELECT user_name from users where user_id = ?", (message.from_user.id,)).fetchone()
    user_name = str(user_name[0])

    sqlite_select_query = """SELECT * from users"""
    cursor.execute(sqlite_select_query)
    records = cursor.fetchall()

    await bot.send_message(message.chat.id, f"{user_name}, —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ TITAN-BOTüìó\nüë•Ô∏èÔ∏è | –ò–≥—Ä–æ–∫–æ–≤ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤ –±–æ—Ç–µ: {len(records)}", parse_mode='html')


@dp.message_handler(commands=['users'])
@dp.throttled(anti_flood, rate=0.5)
async def sbal(message):
	user_id = message.from_user.id
	chat_id = message.chat.id
	try:
		id = int(message.text.split()[1])
		su = message.text.split()[2]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'–ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä ¬ª <code>/users_bal</code> (telegram id) (—Å—É–º–º–∞)')
	name = cursor.execute(f'SELECT user_name from users where user_id = {id}').fetchone()
	name = str(name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {id}').fetchone()
	balance = int(balance[0])
	if user_id == cfg.owner:
		await message.answer(f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å <b>{name}</b> –Ω–∞ <b>{summ}$</b>')
		cursor.execute(f'UPDATE users SET balance = {sum} WHERE user_id = {id}')
		connect.commit()
	else:
		return
		
@dp.message_handler(commands=['pay'])
@dp.throttled(anti_flood, rate=0.5)
async def pay(message):
	user_id = message.from_user.id
	chat_id = message.chat.id
	try:
		id = int(message.text.split()[1])
		su = message.text.split()[2]
		su2 = (su).replace('–∫', '000')
		su3 = (su2).replace('–º', '000000')
		su4 = (su3).replace('.', '')
		sum = int(su4)
		summ = '{:,}'.format(sum).replace(",", ".")
	except:
		await message.answer(f'''‚úÖ <b>–ò—Å–ø–æ–ª—å–∑—É–π:</b>
/pay (telegram id) —Å—É–º–º–∞

üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/pay (telegram id) 1–∫
/pay (telegram id) 1000''')
	name = cursor.execute(f'SELECT user_name from users where user_id = {id}').fetchone()
	name = str(name[0])
	user_name = cursor.execute(f'SELECT user_name from users where user_id = {user_id}').fetchone()
	user_name = str(user_name[0])
	balance = cursor.execute(f'SELECT balance from users where user_id = {id}').fetchone()
	balance = int(balance[0])
	bal = cursor.execute(f'SELECT balance from users where user_id = {user_id}').fetchone()
	bal = int(bal[0])
	if id != user_id:
		if bal >= sum:
			if sum >= 1:
				await message.answer(f'<b>{user_name}</b>, –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ <b>{summ}$</b> <b>{name}</b>')
				cursor.execute(f'UPDATE users SET balance = {balance+sum} WHERE user_id = {id}')
				cursor.execute(f'UPDATE users SET balance = {bal-sum} WHERE user_id = {user_id}')
				connect.commit()
			else:
				await message.answer(f'–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
		else:
			await message.answer(f'–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
	else:
		await message.answer(f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ')




async def on_startup(_):
    await bot.send_message(chat_id=cfg.admin,text=f"""<b>‚úÖ –≥—ç–π</b>
<code>{datetime.now().strftime("%d.%m.%y %H:%M:%S")}</code>""")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
